/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import DB.DB;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author Tusita
 */
public class Books_Edit extends javax.swing.JFrame {

    /**
     * Creates new form Books_Edit
     */
    public Books_Edit() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        author = new javax.swing.JTextField();
        isbn = new javax.swing.JTextField();
        categorycombo = new javax.swing.JComboBox();
        avail = new javax.swing.JTextField();
        shelf = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        bookid = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Edit Books");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Name/Title");
        jLabel2.setBounds(20, 20, 130, 14);
        jLayeredPane1.add(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Author");
        jLabel3.setBounds(30, 60, 130, 14);
        jLayeredPane1.add(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("ISBN");
        jLabel4.setBounds(30, 90, 70, 14);
        jLayeredPane1.add(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Category");
        jLabel5.setBounds(30, 120, 120, 14);
        jLayeredPane1.add(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Availability");
        jLabel7.setBounds(30, 150, 120, 17);
        jLayeredPane1.add(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Shelf Number");
        jLabel8.setBounds(30, 180, 120, 17);
        jLayeredPane1.add(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        name.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        name.setBounds(170, 20, 250, 23);
        jLayeredPane1.add(name, javax.swing.JLayeredPane.DEFAULT_LAYER);

        author.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        author.setBounds(170, 50, 250, 23);
        jLayeredPane1.add(author, javax.swing.JLayeredPane.DEFAULT_LAYER);

        isbn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        isbn.setBounds(170, 80, 250, 23);
        jLayeredPane1.add(isbn, javax.swing.JLayeredPane.DEFAULT_LAYER);

        categorycombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Action, Military, Spy, & Thriller Novels", "Adventure & Fantasy Novels ", "African-American Interest", "Arts, Literature, & Philosophy", "Best-Sellers", "Business, Economy, Finance & Investing", "Childrens Books", "Comics, Humor, & Satire", "Computers, Engineering, & Technology", "Crafts, Hobbies, & Home Living", "Do-It-Yourself, How-To, & Self-Help", "Families, Parenting, & Psychology", "General Fiction", "Health, Fitness, Food & Cooking", "Hispanic/Latino Interest", "Historical Fiction (Includes Westerns)", "Horror & Supernatural Novels", "Local Industries", "Local Interest", "Mystery, Crime, Drama, & Suspense Novels", "People, Politics, & The World", "New Releases", "Religion, Spirituality, & Mysticism", "Romance Novels", "Science & Mathematics", "Science Fiction", "Sports, Games, & Leisure", "Travel & Languages" }));
        categorycombo.setBounds(170, 110, 250, 20);
        jLayeredPane1.add(categorycombo, javax.swing.JLayeredPane.DEFAULT_LAYER);

        avail.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        avail.setBounds(170, 140, 250, 23);
        jLayeredPane1.add(avail, javax.swing.JLayeredPane.DEFAULT_LAYER);

        shelf.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        shelf.setBounds(170, 170, 250, 23);
        jLayeredPane1.add(shelf, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/view.png"))); // NOI18N
        jButton2.setText("View All");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Search_button.png"))); // NOI18N
        jButton1.setText("Get Details");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/reset.png"))); // NOI18N
        jButton4.setText("Reset");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/back.png"))); // NOI18N
        jButton5.setText("Back");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/save.png"))); // NOI18N
        jButton7.setText("Update");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete.png"))); // NOI18N
        jButton8.setText("Delete");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        bookid.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Book ID");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/banner.jpg"))); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Edit Books");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(bookid, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(bookid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton8)
                    .addComponent(jButton7)
                    .addComponent(jButton2))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        new Books_Manage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        new Books_ViewAll().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        reseting();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String id = bookid.getText();

        try {
            //check if fields are empty
            if (id.equals("")) {
                JOptionPane.showMessageDialog(this, "Please enter a Book ID!!", "", JOptionPane.ERROR_MESSAGE);
            } 
            else {
                Connection con = DB.myCon();
                Statement S = con.createStatement();
                //get book details
                ResultSet rs = S.executeQuery("SELECT * FROM book WHERE BID= '" + id + "' ");
                if (rs.next()) {
                    name.setText(rs.getString("title"));
                    author.setText(rs.getString("author"));
                    categorycombo.setSelectedItem(rs.getString("Category"));
                    shelf.setText(rs.getString("Shelf"));

                    isbn.setText(rs.getString("ISBN"));
                    String date =  rs.getString("Date");
                    avail.setText(rs.getString("Availability"));
                } 
                else {
                    JOptionPane.showMessageDialog(this, "Book ID is invalid", "", JOptionPane.ERROR_MESSAGE);
                }
                con.close();
            }
        } 
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "" + e.getMessage() + " Error, Book details not found!", "", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        //check if user really wants to update
        int b = JOptionPane.showConfirmDialog(null, "Do you want to Update this book's details?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (b == 0) {
            String id = bookid.getText();
            Date date = new Date();
            DateFormat dateformat = new SimpleDateFormat("yyyy/MM/dd");

            String category = (String) categorycombo.getSelectedItem();
            

            try {
                //check if all details are empty
                if (name.getText().equals("") || author.getText().equals("") || isbn.getText().equals("") || shelf.getText().equals("") || category.equals("String") ) {
                    JOptionPane.showMessageDialog(null, "Please fill in all fields ", "Update Record", JOptionPane.WARNING_MESSAGE);
                }
                //check if shelf is not negative
                else if (Integer.parseInt(shelf.getText()) < 0) {
                    JOptionPane.showMessageDialog(null, "Invalid Shelf number has been entered", "Update record", JOptionPane.WARNING_MESSAGE);
                }
                else {
                    String title = name.getText();
                    String writer = author.getText();
                    String ISBN = isbn.getText();
                    String able= avail.getText();
                    int shelfno = Integer.parseInt(shelf.getText());

                    Connection con = DB.myCon();
                    Statement S = con.createStatement();
                    //update the details of the book
                    String query1 = "UPDATE book SET title='" + title + "', author='" + writer + "', Category='" + category + "', ISBN='" + ISBN + "', Shelf='" + shelfno + "', Date='" + dateformat.format(date) + "', Availability='"+able+"' WHERE BID='" + id + "' ";
                    S.executeUpdate(query1);
                    JOptionPane.showMessageDialog(null, "Book Details were updated Successfully", "", JOptionPane.INFORMATION_MESSAGE);
                    con.close();
                }
            } 
            catch (NumberFormatException n) {
                JOptionPane.showMessageDialog(this, " Only Enter Numbers to the shelf  field!", "", JOptionPane.ERROR_MESSAGE);
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(this, "" + e.getMessage() + " Error,  Book Details Not Updated!", "", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        //Check if user wants delete the book
        int b = JOptionPane.showConfirmDialog(null, "Do you want to Delete this book from the Library?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (b == 0) {
            String id = bookid.getText();
            String status = "";
            try {
                Connection con = DB.myCon();
                Statement S = con.createStatement();
                //check if the book is available
                ResultSet rs = S.executeQuery("SELECT Availability FROM book WHERE BID='" + id + "'");
                while (rs.next()) {
                    status = rs.getString("Availability");
                }
                //book is available if so delete the book
                if (status.equals("Available")) {
                    String query = "DELETE FROM book WHERE BID='" + id + "'";
                    S.executeUpdate(query);
                    reseting();
                    JOptionPane.showMessageDialog(null, "Book is deleted");
                }
                //if book is not available show error message
                else {
                    JOptionPane.showMessageDialog(null, "Cannot be deleted, book is currently borrowed ", "Warning!!", JOptionPane.WARNING_MESSAGE);
                }
                con.close();
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(this, "" + e.getMessage() + " Error,  Book Details Not Deleted!", "", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Books_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Books_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Books_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Books_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Books_Edit().setVisible(true);
            }
        });
    }
    //method to clear all fields
    private void reseting() {
        bookid.setText("");
        name.setText("");
        author.setText("");
        isbn.setText("");
        categorycombo.setSelectedItem("Select");
        shelf.setText("");
        avail.setText("");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField author;
    private javax.swing.JTextField avail;
    private javax.swing.JTextField bookid;
    private javax.swing.JComboBox categorycombo;
    private javax.swing.JTextField isbn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JTextField name;
    private javax.swing.JTextField shelf;
    // End of variables declaration//GEN-END:variables
}
